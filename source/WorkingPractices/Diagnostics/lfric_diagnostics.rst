.. _lfric_diag:

LFRic Atmosphere Diagnostics
============================

The diagnostic system for the LFRic atmosphere model is dependent on
the XIOS library. Diagnostic outputs are defined in the ``iodef.xml``
required by XIOS to define a lot of the input and output requirements
of an application. The ``iodef.xml`` file for a typical LFRic
atmosphere configuration will include several XML files that can be
found in the ``lfric_atm/metadata`` directory.

Key aspects of the contents of an ``iodef.xml`` file are as follows:

  #. Each field that an application is capable of output will have a
     ``field`` record that provides a text identity of the field, the
     domain of the field, and various other bits of information such
     as the units of the field.
  #. The domain of the field can relate to the spatial domain, but can
     also relate to non-physical dimensions. For example, multiple
     types of vegetation can be stored in a single field with one of
     the axes of the field relating to each type of vegetation.
  #. Diagnostics are only useful if they are output. The ``iodef.xml``
     file contains lists of diagnostic output requests, typically
     grouped into different files. XIOS supports various
     post-processing operations.

.. topic:: Comparing with the Unified Model STASH system

   Users familiar with the UM's STASH system will know that for each
   available diagnostic, multiple output requests can be made, each of
   which can undergo different time or spatial processing and can be
   sent to a different file. Further, the UM system supports a
   graphical user interface that can edit the lists of requests for a
   given application.

   XIOS has similar and more extensive processing capabilities, but at
   the moment, no user interface support has been provided for users
   of the LFRic atmosphere model. Requests have to be constructed by
   editing the XML files that are used to create the ``iodef.xml``
   file that is read by the application.

XIOS is a highly complex and flexible parallel IO system with
post-processing capabilites. It is developed at IPSL.

.. caution::

   While it would be possible to write a set of complex diagnostic
   requests using all the features of XIOS, people should be cautious
   of the possibility that future developments of the LFRic atmosphere
   user environment may not support all the flexibility
   required. Furthermore, the underlying XIOS software is complex, and
   it is possible to create a simple workflow that turns out to be
   unreliable or that imposes high computation costs on the model.

Permitted diagnostic fields
---------------------------

Diagnostic fields must be one of the following types of model fields:

* A :math:`\mathbb{W}_{3}` field representing data, typically scalar
  quantities, at the centre of each 3D model cell.
* A :math:`\mathbb{W}_{theta}` or :math:`\mathbb{W}_{2v}` field both
  representing data at the centre of the bottom and top face of each
  3D model cell (noting that a cell shares the data point on its top
  face with the cell above). The:math:`\mathbb{W}_{3}` fields
  represent scalar quantities, and the :math:`\mathbb{W}_{2v}`
  represent vectors or fluxes.
* A :math:`\mathbb{W}_{2h}` field representing data, typically vectors
  or fluxes, at the centre of the faces around the side of each cell
  (noting that neighbouring cells share these faces and data points).
* A single-level field. Optionally, a single level field may store
  more than one quantity, such as a data point for each vegetation
  type.


Steps for adding a new diagnostic
---------------------------------

To add a diagnostic for potential output from the LFRic atmosphere
model a developer needs to do the following:

#. Create a ``field`` record in the relevant XML file that is used to
   create the XIOS ``iodef.xml`` file.
#. Add code to initialise the field: the LFRic atmosphere includes
   standard methods to support this operation. Note, that some
   diagnostic fields are also prognostic fields: refer to the
   prognostics documentation to understand how to create a new
   prognostic field.
#. Add code to compute the diagnostic `if the diagnostic has been
   requested` or if it is needed to compute another diagnostic that
   is requested. There is no point in computing a diagnostic if it is
   not required.
#. Add code to write the diagnostic to the LFRic atmosphere IO interface.

Several of the science schemes have a dedicated module containing a
procedure that initialises all the diagnostics generated by the scheme
and a procedure that writes them to the diagnostic
system. Modularising the process can simplify the top-level code of
the science scheme.

Creating a field record
~~~~~~~~~~~~~~~~~~~~~~~

The XIOS library bases some of its configuration on an input file
named ``iodef.xml``. The LFRic atmosphere model includes a set of
field definitions for all potential diagnostic and prognostic
fields. The definitions are organised into several files, with the
possible prognostic fields defined in the ``lfric_dictionary.xml``
file, and the model time-step diagnostics defined in
``field_def_diags.xml``. Both files are found in the
``lfric_atm/metadata`` directory.

..topic:: Other field definition files

   As noted, the ``lfric_dictionary.xml`` file lists prognostic fields
   (some of which may also be output as diagnostic fields) and the
   ``field_def_diags.xml`` defines diagnostics that can be output each
   model time-step. Other files holding field definitions include: the
   ``field_def_initial_diagns.xml`` file holding definitions of
   diagnostics that optionally can be output before the first
   time-step has run and the ``field_def_lbc_diags.xml`` file that
   supports reading and writing of Lateral Boundary Conditions fields.

Field definitions live inside a ``field_definition`` XML tag. An
example field definition from ``field_def_diags.xml`` file is as
follows:

::

  <field id="convection__shallow_dt" name="shallow_dt"
  long_name="temperature_increment_from_shallow_convection" unit="K
  s-1" grid_ref="full_level_face_grid" />

The components of the above are as follows:

   * The above text represents a ``field`` tag with a number of
     key-value pair "attributes".
   * The string value of the ``id`` attribute is used in the model to
     identify the diagnostic. The naming convention used by the LFRic
     atmosphere and demonstrated in the above record is the section
     name followed by a double-understroke followed by the a
     descriptive name.
   * The name and long name are only seen in the diagnostic output and
     would need to be recognised by post-processing tools. The names
     may be formally assigned such as by the CF naming convention. In
     this case, the name is the same as the suffix of the ID, but it
     is not always so.
   * The units should be SI units. Again, these are only seen in the
     diagnostic output file.
   * The ``grid_ref`` attribute describes the domain of the field. The
     example field above is represented in the model as a
     :math:`\mathbb{W}_{theta}` field. The attributes used for each
     type of field are shown in the following table.

+-----------------------------------+----------------------------------------+
|  Model field type                 |  Domain attributes                     |
+===================================+========================================+
|  :math:`\mathbb{W}_{3}`           |  ``grid_ref="half_level_face_grid"``   |
+-----------------------------------+----------------------------------------+
|  :math:`\mathbb{W}_{theta}`       |  ``grid_ref="full_level_face_grid"``   |
+-----------------------------------+----------------------------------------+
|  :math:`\mathbb{W}_{2v}`          |  ``grid_ref="full_level_face_grid"``   |
+-----------------------------------+----------------------------------------+
|  :math:`\mathbb{W}_{2h}`          |  ``grid_ref="half_level_edge_grid"``   |
+-----------------------------------+----------------------------------------+
|  :math:`\mathbb{W}_{theta}`       |  ``grid_ref="full_level_face_grid"``   |
+-----------------------------------+----------------------------------------+
|  :math:`\mathbb{W}_{theta}`       |  ``grid_ref="full_level_face_grid"``   |
+-----------------------------------+----------------------------------------+
|  Single-level field               |  ``domain_ref="face"``                 |
+-----------------------------------+----------------------------------------+
|  Multi-data field                 |  ``domain_ref="face"``                 |
|                                   |  ``axis_ref="<multidata type>"``       |
+-----------------------------------+----------------------------------------+

For multi-data fields, the ``<multidata type>`` text would be replaced
by one of the multidata field types used in the model and defined in
the ``axis_def_main.xml`` file in the ``lfric_atm/metadata``
directory. For example:

::

    <field id="surface__throughfall" name="throughfall_rate"
    long_name="canopy_throughfall_flux" unit="kg m-2 s-1"
    domain_ref="face" axis_ref="surface_tiles" />

Initialising the field
~~~~~~~~~~~~~~~~~~~~~~

Fields intended for output to a diagnostic can be initialised by the
LFRic atmosphere prognostic system or can be created local to the
algorithm in which the diagnostic is computed.

To add a new prognostic field, refer to the prognostics
documentation. The LFRic atmosphere is constructed such that
prognostic fields are passed down to the science code inside field
collection objects. Assuming the field collection is accessible from
the point where the field is to be computed, the field will be
accessed from the field collection with code like the following:

::

    type( field_collection_type ), intent(inout) :: soil_fields

    type( field_type ), pointer :: soil_temperature

    call soil_fields%get_field('soil_temperature', soil_temperature)

If a diagnostic is not also a prognostic field, a local field needs to
be declared and initialised to be the correct field type. Several
science sections used by the LFRic atmosphere modularise the process
for initialising all their local diagnostics within a single
initialisation routine.


::

    type( field_type ) :: soil_moisture_content
    type( field_type ) :: grid_canopy_water
    type( field_type ) :: throughfall
    type( field_type ) :: grid_throughfall

    call initialise_diags_for_jules_soil(soil_moisture_content,  &
                                         grid_canopy_water,      &
                                         throughfall,            &
                                         grid_throughfall)

On return from this subroutine, the new fields need to have been
initialised to the appropriate field type required to store the
diagnostic field data, but only for those fields that are required to
compute all the requested diagnostics.

An algorithm that computes the value of a diagnostic must
